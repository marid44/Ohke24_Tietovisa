@page "/counter"
@inject QuizService QuizService

<PageTitle>Quiz</PageTitle>

<h1>Quiz</h1>

@if (questions == null)
{
    <p>Loading questions...</p>
}
else if (!questions.Any())
{
    <p>No questions available.</p>
}
else
{
    <div class="quiz-container">
        <h3>@currentQuestion.Question</h3>
        <div class="button-container">
            <div class="row">
                @for (int i = 0; i < currentQuestion.Options.Length; i++)
                {
                    <div class="col-6">
                        <button class="btn btn-primary option-button" @onclick="() => SelectOption(i)"
                            disabled="@disableOptions">
                            @currentQuestion.Options[i]
                        </button>
                    </div>
                }
            </div>
        </div>
        <p>@resultMessage</p>
        <div class="navigation-buttons">
            <button class="btn btn-secondary" @onclick="PreviousQuestion" disabled="@(!CanGoPrevious)">
                Previous
            </button>
            <button class="btn btn-secondary" @onclick="NextQuestion" disabled="@(!CanGoNext)">
                Next
            </button>
        </div>
    </div>
}

<style>
    /* Center container for quiz */
    .quiz-container {
        text-align: center;
        margin-top: 20px;
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
    }

    .row {
        display: flex;
        width: 100%;
        justify-content: center;
    }

    .col-6 {
        width: 50%;
        padding: 5px;
    }

    .option-button {
        width: 100%;
    }

    .navigation-buttons {
        margin-top: 20px;
    }

    .navigation-buttons button {
        margin: 0 10px;
    }
</style>

@code {
    private List<(string Question, string[] Options, string Answer)> questions;
    private (string Question, string[] Options, string Answer) currentQuestion;
    private int currentQuestionIndex = 0;
    private string resultMessage;
    private bool disableOptions = false;

    protected override async Task OnInitializedAsync()
    {
        await QuizService.LoadQuestionsAsync();
        questions = QuizService.Questions;
        if (questions.Any())
        {
            currentQuestion = questions[currentQuestionIndex];
        }
    }

    private void SelectOption(int optionIndex)
    {
        var selectedAnswer = currentQuestion.Options[optionIndex];

        if (selectedAnswer.Equals(currentQuestion.Answer, StringComparison.OrdinalIgnoreCase))
        {
            resultMessage = "Correct!";
        }
        else
        {
            resultMessage = "Incorrect.";
        }

        // Disable options after selecting an answer
        disableOptions = true;
    }

    private void NextQuestion()
    {
        if (CanGoNext)
        {
            currentQuestionIndex++;
            currentQuestion = questions[currentQuestionIndex];
            resultMessage = string.Empty;
            disableOptions = false; // Re-enable options for the new question
        }
    }

    private void PreviousQuestion()
    {
        if (CanGoPrevious)
        {
            currentQuestionIndex--;
            currentQuestion = questions[currentQuestionIndex];
            resultMessage = string.Empty;
            disableOptions = false; // Re-enable options for the previous question
        }
    }

    private bool CanGoNext => currentQuestionIndex < questions.Count - 1;
    private bool CanGoPrevious => currentQuestionIndex > 0;
}
